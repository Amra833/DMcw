-- Create the USERS table
CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fullname VARCHAR2(100) NOT NULL,
  email VARCHAR2(100) NOT NULL UNIQUE,
  password VARCHAR2(255) NOT NULL
);

DROP TABLE users CASCADE CONSTRAINTS;
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fullname VARCHAR2(100),
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(255)
);


SELECT * FROM users;

DROP TABLE SUPPLIERS CASCADE CONSTRAINTS;
CREATE TABLE SUPPLIERS (
    supplier_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sup_fullname    VARCHAR2(100),
    sup_location    VARCHAR2(100),
    sup_product     VARCHAR2(100),
    sup_photo       VARCHAR2(255) -- store image file path or URL
);

--supplier PLSQL
CREATE OR REPLACE PROCEDURE Add_Supplier (
    p_name       IN VARCHAR2,
    p_location   IN VARCHAR2,
    p_product    IN VARCHAR2,
    p_photo      IN VARCHAR2
) IS
BEGIN
    INSERT INTO SUPPLIERS (sup_fullname, sup_location, sup_product, sup_photo)
    VALUES (p_name, p_location, p_product, p_photo);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Supplier added successfully: ' || p_name);
END;
/

--supplier delete function
CREATE OR REPLACE FUNCTION delete_supplier(p_supplier_id IN NUMBER) RETURN VARCHAR2 IS
BEGIN
    DELETE FROM SUPPLIERS WHERE supplier_id = p_supplier_id;
    COMMIT;
    RETURN 'Supplier deleted successfully.';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error occurred while deleting the supplier.';
END;
/

--supplier insert function
CREATE OR REPLACE FUNCTION insert_supplier(p_name IN VARCHAR2, p_location IN VARCHAR2, p_product IN VARCHAR2, p_photo IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
    INSERT INTO SUPPLIERS (sup_fullname, sup_location, sup_product, sup_photo)
    VALUES (p_name, p_location, p_product, p_photo);
    COMMIT;
    RETURN 'Supplier added successfully.';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error occurred while adding the supplier.';
END;
/

--supplier update function
CREATE OR REPLACE FUNCTION update_supplier(p_supplier_id IN NUMBER, p_name IN VARCHAR2, p_location IN VARCHAR2, p_product IN VARCHAR2, p_photo IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
    UPDATE SUPPLIERS
    SET sup_fullname = p_name,
        sup_location = p_location,
        sup_product = p_product,
        sup_photo = p_photo
    WHERE supplier_id = p_supplier_id;
    COMMIT;
    RETURN 'Supplier updated successfully.';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error occurred while updating the supplier.';
END;
/

SELECT * FROM suppliers;

--products table 
CREATE TABLE PRODUCTS (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100) NOT NULL,
    price_per_unit NUMBER(10, 2) NOT NULL,
    category VARCHAR2(50) CHECK (category IN (
        'Fruits', 
        'Vegetables', 
        'Dairy Products', 
        'Baked Goods', 
        'Handmade Crafts'
    )) NOT NULL
);
ALTER TABLE PRODUCTS
ADD (product_image BLOB);

SELECT * FROM products;

--product table
DROP TABLE PRODUCTS;

DROP TABLE PRODUCTS CASCADE CONSTRAINTS;
CREATE TABLE PRODUCTS (
    product_id NUMBER PRIMARY KEY,               
    product_name VARCHAR2(255) NOT NULL,        
    product_price NUMBER(10, 2) NOT NULL,        
    product_image VARCHAR2(255),                
    category VARCHAR2(50) CHECK (category IN ('Fruits', 'Vegetables', 'Dairy Products', 'Baked Goods', 'Handmade Crafts'))  -- Fixed categories
);

SELECT * FROM products;
DROP TABLE PRODUCTS;

CREATE TABLE PRODUCTS (
    product_id NUMBER PRIMARY KEY,               
    product_name VARCHAR2(255) NOT NULL,        
    product_price NUMBER(10, 2) NOT NULL,        
    product_image VARCHAR2(255),                
    category VARCHAR2(50) CHECK (category IN ('Fruits', 'Vegetables', 'Dairy Products', 'Baked Goods', 'Handmade Crafts'))  -- Fixed categories
);
SELECT * FROM PRODUCTS;

SELECT * FROM PRODUCTS FETCH FIRST 1 ROWS ONLY;

INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_IMAGE, CATEGORY)
VALUES (1, 'Banana', 80.00, 'images/banana.jpg', 'Fruits');

SELECT * FROM PRODUCTS;

-- plsql blogs for products page
CREATE OR REPLACE PROCEDURE insert_product(
    p_name IN VARCHAR2,
    p_price IN NUMBER,
    p_category IN VARCHAR2,
    p_image IN VARCHAR2,
    p_result OUT VARCHAR2
) AS
BEGIN
    INSERT INTO PRODUCTS (product_id, product_name, product_price, category, product_image)
    VALUES (PRODUCT_SEQ.NEXTVAL, p_name, p_price, p_category, p_image);
    COMMIT;
    p_result := 'Product added successfully.';
EXCEPTION
    WHEN OTHERS THEN
        p_result := SQLERRM;
        ROLLBACK;
END;



CREATE SEQUENCE PRODUCT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE PROCEDURE insert_product(
    p_name IN VARCHAR2,
    p_price IN NUMBER,
    p_category IN VARCHAR2,
    p_image IN VARCHAR2,
    p_result OUT VARCHAR2
) AS
BEGIN
    -- Ensure the sequence exists or replace it with the correct one
    INSERT INTO PRODUCTS (product_id, product_name, product_price, category, product_image)
    VALUES (PRODUCT_SEQ.NEXTVAL, p_name, p_price, p_category, p_image);
    COMMIT;
    p_result := 'Product added successfully.';
EXCEPTION
    WHEN OTHERS THEN
        p_result := SQLERRM;
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE update_product(
    p_id IN NUMBER,
    p_name IN VARCHAR2,
    p_price IN NUMBER,
    p_category IN VARCHAR2,
    p_image IN VARCHAR2,
    p_result OUT VARCHAR2
) AS
BEGIN
    UPDATE PRODUCTS
    SET product_name = p_name,
        product_price = p_price,
        category = p_category,
        product_image = p_image
    WHERE product_id = p_id;
    COMMIT;
    p_result := 'Product updated successfully.';
EXCEPTION
    WHEN OTHERS THEN
        p_result := SQLERRM;
        ROLLBACK;
END;


CREATE OR REPLACE PROCEDURE delete_product(
    p_id IN NUMBER,
    p_result OUT VARCHAR2
) AS
BEGIN
    DELETE FROM PRODUCTS WHERE product_id = p_id;
    COMMIT;
    p_result := 'Product deleted successfully.';
EXCEPTION
    WHEN OTHERS THEN
        p_result := SQLERRM;
        ROLLBACK;
END;

DROP TABLE order_items;
DROP TABLE orders;

CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    customer_name VARCHAR2(100),
    delivery_address VARCHAR2(255),
    phone_number VARCHAR2(20),
    email VARCHAR2(100),
    payment_method VARCHAR2(50),
    delivery_method VARCHAR2(50),
    order_status VARCHAR2(20),
    order_date   DATE DEFAULT SYSDATE
);

CREATE TABLE order_items (
    item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    order_id NUMBER,
    product_name VARCHAR2(100),
    price NUMBER(10, 2),
    quantity NUMBER,
    subtotal NUMBER(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

SELECT * FROM orders;
SELECT * FROM order_items;

--PLSQL for orders
CREATE OR REPLACE PROCEDURE UPDATE_ORDER_STATUS (
    p_order_id IN NUMBER,
    p_order_status IN VARCHAR2
) AS
BEGIN
    UPDATE ORDERS
    SET ORDER_STATUS = p_order_status
    WHERE ORDER_ID = p_order_id;
    
    COMMIT;
END UPDATE_ORDER_STATUS;
/

--PLSQL for delete an order
CREATE OR REPLACE PROCEDURE DELETE_ORDER (
    p_order_id IN NUMBER
) AS
BEGIN
    -- Delete related order items
    DELETE FROM ORDER_ITEMS WHERE ORDER_ID = p_order_id;
    
    -- Delete the order itself
    DELETE FROM ORDERS WHERE ORDER_ID = p_order_id;
    
    COMMIT;
END DELETE_ORDER;
/

--PLSQL to update payment status
CREATE OR REPLACE PROCEDURE UPDATE_PAYMENT_STATUS (
    p_order_id IN NUMBER,
    p_payment_status IN VARCHAR2
) AS
BEGIN
    UPDATE ORDERS
    SET PAYMENT_STATUS = p_payment_status
    WHERE ORDER_ID = p_order_id;
    
    COMMIT;
END UPDATE_PAYMENT_STATUS;
/

SELECT * FROM system.orders;


CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    customer_name VARCHAR2(100),
    delivery_address VARCHAR2(255),
    phone_number VARCHAR2(20),
    email VARCHAR2(100),
    payment_method VARCHAR2(50),
    delivery_method VARCHAR2(50),
    order_status VARCHAR2(20),
    order_date   DATE DEFAULT SYSDATE
);

CREATE TABLE order_items (
    item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    order_id NUMBER,
    product_name VARCHAR2(100),
    price NUMBER(10, 2),
    quantity NUMBER,
    subtotal NUMBER(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);